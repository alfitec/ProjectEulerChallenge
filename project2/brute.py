"""
Project Euler: Problem 2: Even Fibonacci Numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms.

fiboEvenSum(10) should return 44.
fiboEvenSum(18) should return 3382.
fiboEvenSum(23) should return 60696.
fiboEvenSum(43) should return 350704366.
Your function should return an even value.
"""

def fibo(fiboElements):
    fn,fn_minus1=1,0  
    fiboNiz=[]
    for i in range(fiboElements):
        #fn,fn_minus1=fn+fn_minus1,fn
        temp=fn+fn_minus1
        fn_minus1=fn
        fn=temp
        fiboNiz.append(fn)
    return fiboNiz
         

def fiboEvenSum(fiboElements):
    fn,fn_minus1=1,0
    sum=0
    for i in range(fiboElements):
        fn,fn_minus1=fn+fn_minus1,fn
        if fn%2==0:
            sum+=fn
    return sum
   
def fiboEvenSum2(fiboMaxElem):
    fn,fn_minus1=1,0
    sum=0
    while(fn<fiboMaxElem):
        if fn%2==0:
            sum+=fn
        fn,fn_minus1=fn+fn_minus1,fn
        
    return sum
         

print(fiboEvenSum(10))
print(fiboEvenSum(18))
print(fiboEvenSum(23))
print(fiboEvenSum(43))
print(fiboEvenSum2(4000000))

def funfun(a,b,c):
    return a(c)+b(c)
